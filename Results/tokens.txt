def (DEF)
calculate_fibonacci (IDENTIFIER)
( (LPAR)
n (IDENTIFIER)
) (RPAR)
: (COLON)
if (IF)
( (LPAR)
n (IDENTIFIER)
= = (CONDITION_OP)
0 (NUMBER)
) (RPAR)
: (COLON)
print (PRINT)
( (LPAR)
"Input must be greater than 0" (STRING)
) (RPAR)
return (RETURN)
if (IF)
( (LPAR)
n (IDENTIFIER)
= = (CONDITION_OP)
2 (NUMBER)
) (RPAR)
: (COLON)
print (PRINT)
( (LPAR)
n (IDENTIFIER)
) (RPAR)
return (RETURN)
a (IDENTIFIER)
= (EQUAL)
0 (NUMBER)
b (IDENTIFIER)
= (EQUAL)
1 (NUMBER)
for (FOR)
i (IDENTIFIER)
in (IN)
range (RANGE)
( (LPAR)
2 (NUMBER)
, (COMMA)
n (IDENTIFIER)
+ (PLUS)
1 (NUMBER)
) (RPAR)
: (COLON)
temp (IDENTIFIER)
= (EQUAL)
a (IDENTIFIER)
+ (PLUS)
b (IDENTIFIER)
a (IDENTIFIER)
= (EQUAL)
b (IDENTIFIER)
b (IDENTIFIER)
= (EQUAL)
temp (IDENTIFIER)
print (PRINT)
( (LPAR)
"Current Fibonacci value:" (STRING)
, (COMMA)
temp (IDENTIFIER)
) (RPAR)
print (PRINT)
( (LPAR)
"Fibonacci value is " (STRING)
, (COMMA)
b (IDENTIFIER)
) (RPAR)
calculate_fibonacci (IDENTIFIER)
( (LPAR)
10 (NUMBER)
) (RPAR)